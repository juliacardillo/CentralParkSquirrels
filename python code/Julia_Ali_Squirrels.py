# -*- coding: utf-8 -*-
"""Julia and Ali Midterm Project - Notebook

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RPBQovVccHXyzWXDq0UJjEluB-OwPkOd
"""

!pip install keplergl

#import packages
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import keplergl
from keplergl import KeplerGl
from wordcloud import WordCloud
#allow colab to output maps
from google.colab import output
output.enable_custom_widget_manager()
pd.set_option('display.width', 180)

#question: what are the most common traits between squirrels in central park, nyc?
#hypothesis: we hypothesize

class ColorNotFound(Exception):
  #raised when user tries to put in a color that is not present in the data frame
  pass
class Squirrels():
  '''
  METHODS TO CLEAN THE DATA
  '''
  def clean_data(self, df1, df2):
    '''
    -we want to drop duplicates, unwanted columns, and n/a values, this code cleans from 3,023 observations to 1817 observations
    -df2 is just a copy of df1 with less columns removed, will only be used to merge later on
    -.unique() by default is case sensitive, we have tested all unique values beforehand

    '''
    bool_mapping = {'TRUE': True, 'FALSE': False}
    #dataframe 1 processing - main dataframe
    df1.replace(bool_mapping)
    df1.drop_duplicates(keep ='first', inplace = True,subset=['Unique Squirrel ID'])
    df1.drop(df1[df1['Unique Squirrel ID'] =='32A-PM-1013-02'].index, inplace= True)
    df1.drop(['Specific Location', 'Other Activities', 'Other Interactions', 'Color notes', 'Combination of Primary and Highlight Color'], axis = 1, inplace = True)
    df1.dropna(axis = 0, how='any', inplace =True)
    df1.to_excel(('bool.xlsx'), index=False)
    #dataframe 2 processing - copy dataframe
    df2.replace(bool_mapping)
    df2.drop_duplicates(keep ='first', inplace = True, subset=['Unique Squirrel ID'])
    df2.drop(['Hectare', 'Hectare Squirrel Number','Combination of Primary and Highlight Color'], axis = 1, inplace = True)
    df2 = df2.replace(bool_mapping)
    return df1

  def get_info(self, df):
    #retreives basic information about the database and its attributes
    print("Names of all the columns: \n")
    print(df.columns)
    print("\nData types of all the columns: \n")
    print(df.dtypes)
    print("\nGeneral information about the dataframe: \n")
    print(df.info())

  def show_uniques(self, df):
    #retrieves unique values present in the dataframe columns, mainly just to check for if there are any outsanding values that may need to be removed
    print(squirrels_df['Shift'].unique())
    print(squirrels_df['Age'].unique())
    print(squirrels_df['Primary Fur Color'].unique())
    print(squirrels_df['Highlight Fur Color'].unique())
    print(squirrels_df['Location'].unique())
    print(squirrels_df['Above Ground Sighter Measurement'].unique())
  '''
  METHODS TO GET SQUIRREL LOCATION INFORMATION
  '''
  def location_pie_chart(self, df):
    #creates a pie chart showing percentage of squirrels seen above ground or on ground plane
    labels = ['Above Ground', 'Ground Plane']
    above_ground = (df['Location'] == 'Above Ground').sum()
    ground_plane = (df['Location'] == 'Ground Plane').sum()
    frequency = [above_ground, ground_plane]
    plt.pie(frequency, labels = labels, autopct='%1.1f%%', startangle=140)
    plt.title('Squirrel Location by Frequency')
    plt.show()

  def squirrel_map(self,df):
    #gets a map of the location of all central park squirrels recorded using kepler gl
    squirrel_map = KeplerGl(height = 500)
    squirrel_map.add_data(df,'Squirrel Locations')
    return squirrel_map

  def scatter(self, df):
    #make a scatter plot of squirrel latitude and hectare
    df_sorted = df.sort_values(by='Y')
    x = df_sorted['Hectare'].astype(str)
    y = df_sorted['Y']
    plt.scatter(x, y)
    plt.xticks(ticks=['01I', '20F', '42A'], labels=['01I', '20F', '42A'])
    plt.xlabel('Hectare')
    plt.ylabel('Latitude')
    plt.title('Latitude vs. Hectare')
    plt.show()

  '''
  METHODS TO GET SQUIRREL APPEARANCE
  '''
  def age_pie_chart(self, df):
    #creates a pie chart showing percentage of squirrel ages
    labels = ['Adult', 'Juvenile']
    adult = (df['Age'] == 'Adult').sum()
    juvenile = (df['Age'] == 'Juvenile').sum()
    frequency = [adult, juvenile]
    plt.pie(frequency, labels = labels, autopct='%1.1f%%', startangle=140)
    plt.title('Squirrel Age by Frequency')
    plt.show()

  def histogram(self, df):
    #method to create a historgram of squirrel color distribution. set Gray = 1, Cinnamon = 2, Black = 3
    df.loc[df['Primary Fur Color']  == 'Gray', 'Primary Fur Color'] = 1
    df.loc[df['Primary Fur Color']  == 'Cinnamon', 'Primary Fur Color'] = 2
    df.loc[df['Primary Fur Color']  == 'Black', 'Primary Fur Color'] = 3
    bin_edges = [.5, 1.5, 2.5, 3.5]
    plt.hist(df['Primary Fur Color'], bins = bin_edges, edgecolor= 'black')
    plt.title('Colors by Frequency')
    plt.xlabel('Colors')
    plt.ylabel('Frequency')
    plt.grid(False)
    plt.xticks([1,2,3],['Gray','CInnamon','Black'])
    plt.show

  def highlight_wordcloud(self, df):
    #method to create a word cloud, populating with squirrel fur highlight colors
    wordcloud_text = ' '.join(df['Highlight Fur Color'].unique())
    wordCloud = WordCloud(width =250, height = 250, background_color = 'white').generate(wordcloud_text)
    plt.figure(figsize=(10,5))
    plt.imshow(wordCloud,interpolation='bilinear')
    plt.axis('off')
    plt.title('Highlight Fur Colors')
    plt.show

  '''
  METHODS TO GET SQUIRREL BEHAVIOR INFORMATION
  '''
  def behaviors_chart(self,df):
    labels = ['Running', 'Chasing', 'Climbing', 'Eating', 'Foraging','Kuks','Quaas','Moans','Tail flags','Tail twitches','Approaches','Indifferent','Runs from']
    #get counts of boolean values for each feature so that it can be utilized in a bar chart
    running_false = (df['Running'] == False).sum()
    running_true = (df['Running'] == True).sum()
    chasing_false = (df['Chasing'] == False).sum()
    chasing_true = (df['Chasing'] == True).sum()
    climbing_false = (df['Climbing'] == False).sum()
    climbing_true = (df['Climbing'] == True).sum()
    eating_false = (df['Eating'] == False).sum()
    eating_true = (df['Eating'] == True).sum()
    foraging_false = (df['Foraging'] == False).sum()
    foraging_true = (df['Foraging'] == True).sum()
    kuks_false = (df['Kuks'] == False).sum()
    kuks_true = (df['Kuks'] == True).sum()
    quaas_false = (df['Quaas'] == False).sum()
    quaas_true = (df['Quaas'] == True).sum()
    moans_false = (df['Moans'] == False).sum()
    moans_true = (df['Moans'] == True).sum()
    flag_false = (df['Tail flags'] == False).sum()
    flag_true = (df['Tail flags'] == True).sum()
    twitch_false = (df['Tail twitches'] == False).sum()
    twitch_true = (df['Tail twitches'] == True).sum()
    approach_false = (df['Approaches'] == False).sum()
    approach_true = (df['Approaches'] == True).sum()
    indif_false = (df['Indifferent'] == False).sum()
    indif_true = (df['Indifferent'] == True).sum()
    runs_false = (df['Runs from'] == False).sum()
    runs_true = (df['Runs from'] == True).sum()
    #create the lists containing true and false behavior counts for each feature
    false_behaviors = [running_false,chasing_false, climbing_false,eating_false,foraging_false,kuks_false,quaas_false,moans_false,flag_false,twitch_false,approach_false,indif_false,runs_false]
    true_behaviors = [running_true,chasing_true, climbing_true,eating_true,foraging_true,kuks_true,quaas_true,moans_true,flag_true,twitch_true,approach_true,indif_true,runs_true]
    width= .3
    space_bars = 1
    x = np.arange(len(labels))
    fig, ax = plt.subplots()
    #format the graphs
    true_bars = ax.bar(x-width/2 -space_bars/2, true_behaviors,width, label = 'True')
    false_bars = ax.bar(x + width/2 - space_bars/2, false_behaviors, width, label = 'False')
    ax.set_xlabel('Behaviors')
    ax.set_ylabel('Frequencies')
    ax.set_title('Studied Behaviors')
    ax.set_xticks(x)
    ax.set_xticklabels(labels, rotation=45, ha='right') #make all of the labels fit
    ax.legend()
    plt.tight_layout()
    plt.show()

  def pair_plot(self, df):
    chosen_columns = ['Age','Above Ground Sighter Measurement', 'Running','Chasing','Climbing','Eating','Foraging','Quaas','Moans','Tail flags','Tail twitches','Approaches','Indifferent','Runs from']
    sns.pairplot(df[chosen_columns])
    plt.show()

  def heat_map(self, df):
    #create a heat map of categorical variables from a pivot table
    #set am = 0 and pm = 1
    df_heatmap = df[['X','Y','Shift']]
    df_heatmap.loc[df_heatmap['Shift'] == 'AM'] = 0
    df_heatmap.loc[df_heatmap['Shift'] == 'PM'] = 1
    df_heatmap = df.pivot_table(values='Y', index = 'X', columns = 'Shift', aggfunc = np.mean)
    #npmatrix = np.matrix(df_heatmap)
    plt.figure(figsize=(10,25))
    sns.heatmap(df_heatmap, annot=False, cmap='coolwarm')
    plt.title('Correlation Heatmap')
    plt.show()

  def contingency_table(self,df):
    #create a contingency table to see relationships between the behaviors and age of the squirrel
    contingency_table = pd.crosstab(df['Age'], columns=[df['Running'], df['Climbing'],df['Eating'],df['Foraging']], margins=True)
    pd.set_option('display.max_columns', None)
    #contingency_table_df = contingency_table.reset_index()
    print(contingency_table)

  '''
  MISCELLANEOUS METHODS
  '''
  def merge(self, df1, df2):
    #inner merge, only returns the rows for which the squirrel ID is present in both dataframes, merge squirrels_df and squirrels_df_copy
    joined = pd.merge(df1,df2, on= 'Unique Squirrel ID', how='inner', validate = 'one_to_one')
    return joined

  def at_pm(self, df):
    #retrieve all squirrels that were seen at night and display // example of slicing data of a particular column value
    return squirrels_df.loc[squirrels_df['Shift'] == 'PM']
  def at_am(self, df):
    #retrieve all squirrels that were seen during the day and display // example of slicing data of a particular column value
    return squirrels_df.loc[squirrels_df['Shift'] == 'AM']

  def arrange_and_extract_data(self, df, **kwargs):
    # Arrange the data based on the 'arrange' keyword arguments
    arranged_df = df[list(kwargs['arrange'].values())]

    # Extract the data based on the 'extract' keyword arguments
    extracted_df = df[list(kwargs['extract'].values())]

    return arranged_df, extracted_df

  def numpy_operations(self, df):
    #converts x and y coordinates in dataframe and uploads to numpy array / matrix (a 2d array is by default a matrix)
    x_values = df['X'].values
    y_values = df['Y'].values
    nparray = np.array([x_values,y_values]).T
    con = nparray[:,1] > 40.79
    print(nparray[con])

  def colors_count(self, df, *args):
    #retrieves the count of colors of squirrels, variable amount of arguments, throws exception if invalid input
      try:
        for arg in args:
          if arg not in df['Primary Fur Color'].unique():
            raise ColorNotFound
        for arg in args:
          print('Printing squirrels of color {}'.format(arg))
          count = (df['Primary Fur Color']== arg).sum()
          print('Count for {} = {}'.format(arg, count))
      except ColorNotFound:
        print('Please enter a color present in the dataframe, such as Gray, Black, or Cinnamon')

#create our instance of the squirrel class and read the data into a pandas dataframe
squirrels_df = pd.read_csv('/content/squirrels.csv')
squirrels_df_copy = squirrels_df.copy()
squirrel = Squirrels()
squirrel.get_info(squirrels_df)
#perform methods on the instance
squirrel.clean_data(squirrels_df, squirrels_df_copy)
squirrel.get_info(squirrels_df)
#squirrel.show_uniques(squirrels_df)

"""# ** Squirrel Location**

---


"""

squirrel.squirrel_map(squirrels_df)

squirrel.location_pie_chart(squirrels_df)

squirrel.scatter(squirrels_df)
#strong positive correlation is shown between the two variables

"""## Squirrel Appearance

---


"""

#shows the colors of the squirrels by frequency in a histogram, right skewed distribution
squirrel.histogram(squirrels_df)

squirrel.highlight_wordcloud(squirrels_df)

squirrel.age_pie_chart(squirrels_df)

"""### Squirrel Behaviors"""

#shows the frequency of observed squirrel behaviors
squirrel.behaviors_chart(squirrels_df)

squirrel.contingency_table(squirrels_df)

#because this is all categorical data, not ideal for seeing the relationship, thus we created the contingency table above
squirrel.pair_plot(squirrels_df)

squirrel.heat_map(squirrels_df)

squirrel.squirrel_map(squirrels_df[squirrels_df['Shift']=='AM'])

squirrel.squirrel_map(squirrels_df[squirrels_df['Shift']=='PM'])

squirrel.merge(squirrels_df,squirrels_df_copy)

#slice part of the data and display
squirrels_df[['Unique Squirrel ID', 'Primary Fur Color']]
#retrieve all squirrels that were seen at night and during the day
squirrel.at_am(squirrels_df)

squirrel.at_pm(squirrels_df)

arrange_columns = {'c1': 'X', 'c2': 'Y', 'c3':'Unique Squirrel ID', 'c4':'Hectare', 'c5':'Shift', 'c6':'Date', 'c7': 'Hectare Squirrel Number', 'c8':'Age','c9':'Primary Fur Color','c10':'Highlight Fur Color','c11':'Location','c12':'Above Ground Sighter Measurement','c13':'Running','c14':'Chasing','c15':'Climbing','c16':'Eating','c17':'Foraging','c18':'Kuks','c19':'Quaas','c20':'Moans','c21':'Tail flags','c22':'Tail twitches','c23':'Approaches', 'c24':'Indifferent','c25':'Runs from','c26':'Lat/Long'}
#extraction
extract_columns = {'a': 'Date', 'b': 'Hectare'}

arranged_data, extracted_data = squirrel.arrange_and_extract_data(squirrels_df, arrange=arrange_columns, extract=extract_columns)

print("Arranged Data:")
print(arranged_data.head())

print("\nExtracted Data:")
print(extracted_data.head())

squirrel.numpy_operations(squirrels_df)

#testing *args
squirrel.colors_count(squirrels_df, 'Gray', 'Black')

#this code will throw the exception
squirrel.colors_count(squirrels_df, 'Gray', 'Purple')